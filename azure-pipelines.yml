trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- bash: |
    if ! command -v gcloud &> /dev/null
    then
        echo "Google Cloud SDK not found, installing specific version..."
        # The script to invoke GoogleCloudSdkTool task
    else
        echo "Google Cloud SDK already installed, checking version..."
        gcloud --version
    fi
  displayName: 'Check and Install Google Cloud SDK'

- task: GoogleCloudSdkTool@1
  condition: and(succeeded(), eq(variables['GCloudSDKInstalled'], 'false'))
  inputs:
    versionSpec: '315.x'

- task: DownloadSecureFile@1
  name: gcpKey
  inputs:
    secureFile: 'edtech-azure-pipepine-gcp-key.json'

- task: DownloadSecureFile@1
  name: sshPrivateKey
  inputs:
    secureFile: 'gcp-webserver-ssh-key-private'

- task: DownloadSecureFile@1
  name: sshPublicKey
  inputs:
    secureFile: 'gcp-webserver-ssh-key-public.pub'

- bash: |
    gcloud auth activate-service-account --key-file $(gcpKey.secureFilePath)
    gcloud config set project secret-air-408514
  displayName: 'Authenticate to GCP and Set Project'


- script: |
    mkdir -p $HOME/.ssh
    chmod 700 $HOME/.ssh
    chmod 600 $(sshPrivateKey.secureFilePath)
    chmod 644 $(sshPublicKey.secureFilePath)
    cp $(sshPrivateKey.secureFilePath) $HOME/.ssh/google_compute_engine
    cp $(sshPublicKey.secureFilePath) $HOME/.ssh/google_compute_engine.pub
  displayName: 'Prepare SSH Keys'

- script: |
   ls -lh $(Build.SourcesDirectory)/frontend
   gcloud compute scp --recurse $(Build.SourcesDirectory)/frontend webserver:~/frontend --zone asia-south1-c  --verbosity=debug
  displayName: 'Copy frontend Folder to VM'


# - script: |
#     gcloud compute ssh webserver --zone asia-south1-c --command "\
#       sudo apt update; \
#       command -v git >/dev/null 2>&1 || { echo 'Installing git...'; sudo apt install -y git; }; \
#       command -v nginx >/dev/null 2>&1 || { echo 'Installing nginx...'; sudo apt install -y nginx; sudo systemctl start nginx; }; \
#       node_version_installed=\$(node --version 2>/dev/null) && [[ \$node_version_installed =~ v20.* ]] || { \
#         echo 'Setting up Node.js v20...'; \
#         curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -; \
#         echo 'Installing Node.js...'; \
#         sudo apt-get install -y nodejs; \
#       }; \
#     "
#   displayName: 'SSH and Conditionally Install Software on VM'


